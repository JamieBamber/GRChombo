import yt
import numpy as np
import matplotlib.pyplot as plt
import math
from sys import exit
from os import makedirs

yt.enable_parallelism()

# Newtonian Binaries

data_root_dir = "/p/scratch/pra116/bamber1/NewtonianBinaryScalar/"
plots_dir = "/p/scratch/pra116/bamber1/plots/Newtonian_Binary_BH/"
data_dir = "/p/home/jusers/bamber1/juwels/GRChombo/Analysis/data/Newtonian_Binary_BH_data/"

L=1024
N1=256
abmax=20
z_position = 0.001
width = 100
N = 1024

############################

class data_dir:
        def __init__(self, num, M, d, mu, dt_mult, l, m, Al):
                self.num = num
                self.M = float(M)
                self.d = float(d)
                self.mu = float(mu)
                self.dt_mult = dt_mult
                self.l = l
                self.m = m
                self.Al = float(Al)
                self.name = "run{:04d}_M{:s}_d{:s}_mu{:s}_dt_mult{:s}_l{:d}_m{:d}_Al{:s}_L{:d}_N{:d}".format(num, M, d, mu, dt_mult, l, m, Al, L, N1)

data_dirs = []
def add_data_dir(num, M, d, mu, dt_mult, l, m, Al):
        x = data_dir(num, M, d, mu, dt_mult, l, m, Al)
        data_dirs.append(x)
                
#add_data_dir(7, "0.2", "10", "0.02", "0.5", 0, 0, "0")                                                                                                        
#add_data_dir(8, "0.2", "10", "0.025", "0.5", 0, 0, "0")                                                                                                       
#add_data_dir(9, "0.2", "10", "0.015", "0.5", 0, 0, "0")                                                                                                       
#add_data_dir(10, "0.2", "10", "0.01", "0.5", 0, 0, "0")                                                                                                       
#add_data_dir(11, "0.2", "10", "0.03", "0.5", 0, 0, "0")                                                                                                       
#add_data_dir(12, "0.2", "10", "0.02", "0.5", 1, -1, "0")                                                                                                      
#add_data_dir(13, "0.2", "10", "0.02", "0.5", 1, 1, "0")                                                                                                        
add_data_dir(15, "0.48847892320123", "12.21358", "1", "0.0625", 0, 0, "0")
add_data_dir(16, "0.48847892320123", "12.21358", "1", "0.0625", 1, -1, "0")
add_data_dir(17, "0.48847892320123", "12.21358", "1", "0.0625", 1, 1, "0")
add_data_dir(18, "0.2", "10", "1", "0.0625", 0, 0, "0")
add_data_dir(19, "0.2", "10", "0.1", "0.125", 0, 0, "0")
add_data_dir(20, "0.2", "10", "0.5", "0.0625", 0, 0, "0")
                
############################

def ray_pos(t, M, d, width):
        omega_BBH = np.sqrt(2*M/d**3)
        start = [(L-width*np.cos(t*omega_BBH))/2,(L-width*np.sin(t*omega_BBH))/2,z_position]
        end = [(L+width*np.cos(t*omega_BBH))/2,(L+width*np.sin(t*omega_BBH))/2,z_position]
        return (start, end)
        
"""def get_puncture_data(BBHsubdir):
	file_name = data_root_dir + BBHsubdir + "/BinaryBHSFChk_Punctures.dat"
	data = np.genfromtxt(file_name, skip_header=1)	
	return data"""

def make_ray(ds, start, end, N):
	start_list = []
	end_list = []
	for i in range(0, 3):
		start_list += start[i]
		end_list += end[i]
	print("making ray")
	ray = ds.r[start:end:N*1j]
	return np.array(ray["rho"])
#
def get_line_data(dd):
        BinaryBH_dataset_path = data_root_dir + dd.name + "/BinaryBHSFPlot_*.3d.hdf5"
        ds = yt.load(BinaryBH_dataset_path)
        phi0 = 1
        rho0 = 0.5*(dd.mu*phi0)**2
        
        data_storage = {}
        for sto, dsi in ds.piter(storage=data_storage):
                t = dsi.current_time
                start, end = ray_pos(t, dd.M, dd.d, width)
                ray = make_ray(dsi, start, end, N)/rho0
                output = [t, ray]
                sto.result = output
                sto.result_id = str(dsi)
                



abmax=20
z_position = 0.001

# load datasets
BinaryBH_dataset_path = data_root_dir + "BinaryBHScalarField/" + BinaryBH_dir + "/BinaryBHSFPlot_*.3d.hdf5"
KerrBH_dataset_path = data_root_dir + "KerrSF/" + KerrBH_dir + "/KerrSFp_*.3d.hdf5"
dseriesB = yt.load(BinaryBH_dataset_path) 
dseriesK = yt.load(KerrBH_dataset_path) 
print("loaded " + BinaryBH_dataset_path)
print("loaded " + KerrBH_dataset_path)
print("BBH series length = ", len(dseriesB))
print("KerrBH series length = ", len(dseriesK)/2)
Nts = min(len(dseriesB), int(len(dseriesK)/2))
if int(len(dseriesK)/2) < len(dseriesB):
	dseriesB = dseriesB[160:Nts]

plot_interval_KerrBH = 10
plot_interval_BinaryBH = 5
dt_KerrBH = 0.25
dt_BinaryBH = 1.0

puncture_data = get_puncture_data(BinaryBH_dir)
print("loaded puncture data")

# iterate through dataseries
for dsB in dseriesB.piter():
	#for n_BinaryBH in range(62, 63):
	#dsB = dseriesB[n_BinaryBH]	
	t = dsB.current_time	
	n_BinaryBH = int(t/(dt_BinaryBH*plot_interval_BinaryBH))
	# get Kerr data
	dsK = dseriesK[2*n_BinaryBH]

	# get puncture position
	puncture_positions = puncture_data[n_BinaryBH*plot_interval_BinaryBH,1:]
	p1 = puncture_positions[0:2]
	p2 = puncture_positions[3:5]
	print("puncture 1 position = ", p1)
	print("puncture 2 position = ", p2)

	# convert BBH slice to fixed resolution array
	width = 100
	N = 1024
	dx = width/N
	centerBBH = np.array([256.0, 256.0])
	centerKBH = np.array([256.0, 256.0])
	c1 = centerKBH + (centerBBH - p1)
	c2 = centerKBH - (centerBBH - p1)
	print("centerKBH 1 position = ", c1)
	print("centerKBH 2 position = ", c2)
	# 

	# positions of the ray endpoints
	p = vecmag(p2 - p1)
	BBHstart = centerBBH + (p1 - p2)*0.5*width/p
	BBHend = centerBBH + (p2 - p1)*0.5*width/p
	BBHstart = np.append(BBHstart, z_position)
	BBHend = np.append(BBHend, z_position)
	d1 = vecmag(c1 - centerKBH)
	d2 = vecmag(c2 - centerKBH)
	Kstart1 = c1 - (c1 - centerKBH)*0.5*width/d1
	Kend1 = c1 + (c1 - centerKBH)*0.5*width/d1
	Kstart2 = c2 + (c2 - centerKBH)*0.5*width/d1
	Kend2 = c2 - (c2 - centerKBH)*0.5*width/d1
	Kstart1 = np.append(Kstart1, z_position)
	Kend1 = np.append(Kend1, z_position)
	Kstart2 = np.append(Kstart2, z_position)
	Kend2 = np.append(Kend2, z_position)

	# get ray data
	arrK1 = make_ray(dsK, Kstart1, Kend1, N)
	arrK2 = make_ray(dsK, Kstart2, Kend2, N)
	arrB = make_ray(dsB, BBHstart, BBHend, N)
	print("made all rays")

	# convert to numpy arrays
	arrKmean = 0.5*(arrK1 + arrK2)
	print("made numpy arrays",flush=True)
	# combine
	out_arr = arrB - arrKmean
	print("made combined array",flush=True)

	########### plot graph
	print("plotting graph...",flush=True)
	line_pos = np.linspace(-0.5*width,+0.5*width,N) 
	fig, ax = plt.subplots()
	ax.plot(line_pos, arrK1, 'c--', label="single BH 1")
	ax.plot(line_pos, arrK2, 'g--', label="single BH 2")
	ax.plot(line_pos, arrKmean, 'b-', label="mean of single BHs")
	ax.plot(line_pos, arrB, 'r-', label="Binary BHs")

	phi_max=np.max(arrB)
	phi_min=np.min(arrB)	
	ax.text(0.02, 0.98, 'BBH max={:.2f} min={:.2f}'.format(phi_max, phi_min), horizontalalignment='left',verticalalignment='top', transform=ax.transAxes, fontsize=12)
	title = "Compare 1D ray $\\phi$ profiles for binary and two single BHs, t={:.1f}".format(t)
	plt.legend(fontsize=10)
	plt.title(title)
	ax.set_xlabel("line position from centre")
	ax.set_ylabel("$\\phi$")
	ax.set_ylim((-abmax, abmax))
	plt.tight_layout()
	save_path = plots_dir + movie_folder + "/BBH_movie_{:06d}.png".format(n_BinaryBH)
	plt.savefig(save_path, transparent=False)
	print("saved " + save_path)
	plt.clf()
	plt.close('all')
