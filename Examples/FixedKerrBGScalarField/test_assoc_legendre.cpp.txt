# define CH_SPACEDIM 3

#include <iostream>
#include <math.h>
#include "assoc_legendre.hpp"
#include "boost_spherical_harmonic.hpp"
#include <stdio.h>

using namespace std;

# define M_PI           3.14159265358979323846  /* pi */

void test_vs_boost_legendre(const int em, const int el) {
	double theta = M_PI*std::rand()/RAND_MAX;
	double cos_theta = cos(theta);
	double sin_theta = sin(theta);
	int is_neg = (em < 0);
	double boost_P_lm = pow(-1, is_neg*em)*sqrt(4*M_PI)*boost::math::spherical_harmonic(el, em, theta, 0).real();
	double my_P_lm_v1 = AssocLegendre::assoc_legendre(el, em, cos_theta, sin_theta);
	double my_P_lm_v2 = AssocLegendre::assoc_legendre_with_deriv(el, em, cos_theta, sin_theta).Magnitude;
	printf("  l,m = %d,%d \n", el, em);
	printf("theta/PI = %.4f \n", theta/M_PI);
	printf("boost Ylm = %.6f \n", boost_P_lm);
	printf("my Ylm v1 = %.6f \n", my_P_lm_v1);
	printf("my Ylm v2 = %.6f \n", my_P_lm_v2);
	printf("difference v1 = %f   ", my_P_lm_v1 - boost_P_lm);
	printf("difference v2 = %f\n", my_P_lm_v2 - boost_P_lm);
}

int main() {
	// get random coordinates
	std::srand(234545673);
	for(int l = 0; l < 6; l++) {
		for(int m = -l; m <= l; m++){
			test_vs_boost_legendre(m, l);	
		}
	}
    	return 0;
}
